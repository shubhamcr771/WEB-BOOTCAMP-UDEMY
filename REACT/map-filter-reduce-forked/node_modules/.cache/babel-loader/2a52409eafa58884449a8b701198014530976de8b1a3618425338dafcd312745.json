{"ast":null,"code":"// //Map -Create a new array by doing something with each item in an array.\n\n// // function triple(x) {\n// //     return x * 3;\n// // }\n// // const newNumbers = numbers.map(triple);\n\n// // console.log(newNumbers);\n\n// // var newNumbers = [];\n\n// // numbers.forEach(function (x) {\n\n// //     newNumbers.push(x * 2);\n// //     });\n// // console.log(newNumbers);\n\n// //Filter - Create a new array by keeping the items that return true.\n\n// // function numberCheck(num) {\n// //     return num < 100;\n// // }\n// // const newNumbers = numbers.filter(numberCheck);\n\n// // var newNumbers = [];\n// // numbers.filter(function(num) {\n// //     if(num > 10) {\n// //         newNumbers.push(num)\n// //     }\n\n// // });\n// // console.log(newNumbers);\n\n// //Reduce - Accumulate a value by doing something to each item in an array.\n\n// // function Adds(pre, cur) {\n// //     return pre + cur;\n// // }\n\n// // var newNumbers = numbers.reduce(Adds);\n\n// // console.log(newNumbers);\n\n// //Find - find the first item that matches from an array.\n\n// // var numbers = [3, 56, 2, 48, 5, 6];\n\n// // var newNumbers = numbers.find(function (num) {\n// //     return num > 10;\n// // });\n\n// // console.log(newNumbers);\n\n// //FindIndex - find the index of the first item that matches.\n\n// var numbers = [3, 56, 2, 48, 5, 6];\n\n// var newNumbers = numbers.findIndex(function (num) {\n//     return num > 10;\n// });\n\n// console.log(newNumbers);\n\n// CHALLANGE is to bring the meaning data in new array but \n\nimport emojipedia from \"./emojipedia\";\nvar newArray = emojipedia.map(function (item) {\n  return item.meaning.slice(0, 100);\n});\nconsole.log(newArray);","map":{"version":3,"names":["emojipedia","newArray","map","item","meaning","slice","console","log"],"sources":["C:/WEB-BOOTCAMP-UDEMY/REACT/map-filter-reduce-forked/src/index.js"],"sourcesContent":["\n\n// //Map -Create a new array by doing something with each item in an array.\n\n// // function triple(x) {\n// //     return x * 3;\n// // }\n// // const newNumbers = numbers.map(triple);\n\n// // console.log(newNumbers);\n\n// // var newNumbers = [];\n\n// // numbers.forEach(function (x) {\n\n// //     newNumbers.push(x * 2);\n// //     });\n// // console.log(newNumbers);\n\n// //Filter - Create a new array by keeping the items that return true.\n\n\n\n// // function numberCheck(num) {\n// //     return num < 100;\n// // }\n// // const newNumbers = numbers.filter(numberCheck);\n\n// // var newNumbers = [];\n// // numbers.filter(function(num) {\n// //     if(num > 10) {\n// //         newNumbers.push(num)\n// //     }\n\n// // });\n// // console.log(newNumbers);\n\n\n\n// //Reduce - Accumulate a value by doing something to each item in an array.\n\n\n// // function Adds(pre, cur) {\n// //     return pre + cur;\n// // }\n\n\n\n// // var newNumbers = numbers.reduce(Adds);\n\n// // console.log(newNumbers);\n\n\n\n\n\n// //Find - find the first item that matches from an array.\n\n// // var numbers = [3, 56, 2, 48, 5, 6];\n\n\n// // var newNumbers = numbers.find(function (num) {\n// //     return num > 10;\n// // });\n\n// // console.log(newNumbers);\n\n// //FindIndex - find the index of the first item that matches.\n\n// var numbers = [3, 56, 2, 48, 5, 6];\n\n// var newNumbers = numbers.findIndex(function (num) {\n//     return num > 10;\n// });\n\n// console.log(newNumbers);\n\n\n// CHALLANGE is to bring the meaning data in new array but \n\nimport emojipedia from \"./emojipedia\";\n\n\n\nvar newArray = emojipedia.map(function (item) {\n    return (item.meaning.slice(0, 100));\n\n})\nconsole.log(newArray);\n\n"],"mappings":"AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAGA;AACA;AACA;;AAIA;;AAEA;;AAMA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,UAAU,MAAM,cAAc;AAIrC,IAAIC,QAAQ,GAAGD,UAAU,CAACE,GAAG,CAAC,UAAUC,IAAI,EAAE;EAC1C,OAAQA,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;AAEtC,CAAC,CAAC;AACFC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}